networks:
  observability:

services:
  ## -------------------------- ##
  # ml_host_backend related services
  ## -------------------------- ##
  ml_host_backend_base_image:
    build:
      context: ./services/ml_host_backend
      dockerfile: Dockerfile.base
    image: ml_host_backend:base
  # Semi-containerised for development purpose
  # ml_host_backend_local:
  #   image: ml_host_backend:base
  #   volumes:
  #     - ./services/ml_host_backend:/home/services/ml_host_backend
  #     - ./services/ml_train_hub/mlruns:/home/services/ml_train_hub/mlruns
  #   container_name: ml_host_backend_local
  #   depends_on:
  #     - ml_host_backend_base_image
  #     - ml_train_hub_dev
  #   env_file:
  #     - ./.envs/.ml_host_backend
  #   ports:
  #   - "8000:8000"
  #   command: ["uvicorn", "ml_host_backend.app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
  # fully containerised server for using with other services
  ml_host_backend_dev:
    build:
      context: ./services/ml_host_backend
      dockerfile: Dockerfile.stages
      target: dev
    container_name: ml_host_backend_dev
    volumes:
      - ./services/ml_host_backend:/home/services/ml_host_backend
      - ./services/ml_train_hub/mlruns:/home/services/ml_train_hub/mlruns
    image: ml_host_backend:dev
    depends_on:
      - ml_host_backend_base_image
      - ml_train_hub_dev
      - ml_user_mgmt_dev
    env_file:
      - ./.envs/.ml_host_backend
    ports:
    - "8000:8000"
    networks:
      - observability

  ## --------------------------##
  # ml_train_hub related services
  ## --------------------------##
  ml_train_hub_dev:
    container_name: ml_train_hub_dev
    image: ml_train_hub:dev #  ðŸ‘ˆ This sets the name and tag
    build:
      context: ./services/ml_train_hub
      dockerfile: Dockerfile
      target: dev
    volumes:
      - ./services/ml_train_hub/mlruns:/home/services/ml_train_hub/mlruns
      - ./services/ml_train_hub/file_exchange:/home/services/ml_train_hub/file_exchange # adapt the local folder for the prod server, how files shall be exchanged
    ports:
    - "8001-8002:8001-8002" # MLflow server (dev=8001) and FastAPI server (dev=8002)
    networks:
      - observability

  ## --------------------------##
  # ml_user_mgmt related services
  ## --------------------------##
  ml_user_mgmt_dev:
    container_name: ml_user_mgmt_dev
    image: ml_user_mgmt:dev #  ðŸ‘ˆ This sets the name and tag
    build:
      context: ./services/ml_user_mgmt
      dockerfile: Dockerfile
      target: dev
    ports:
    - "8003:8003" # FastAPI server (dev=8003)
    networks:
      - observability

  prometheus: # monitor & store metrics and make them available for grafana
    image: prom/prometheus:latest
    volumes:
      - ./data/prometheus-data:/prometheus # persist time-series metrics data and configurations
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - observability

  loki: # store logs and make them available for grafana
    image: grafana/loki:3.5.1
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yml
    volumes:
      - ./data/loki-data:/loki # persist ingested logs
      - ./observability/loki/loki-config.yml:/etc/loki/loki-config.yml
    networks:
      - observability

  alloy: # ship logs to loki
    image: grafana/alloy:latest
    container_name: grafana-alloy
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro  # Linux only
      - ./observability/agent/config.alloy:/etc/alloy/config.alloy
      - ./data/alloy-data:/var/lib/alloy/data # persist alloy's position and state
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - "12345:12345"
    networks:
      - observability
    depends_on:
      - loki

  grafana: # visualize observability data
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true # removes login
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin # grants admin role to anonymous access
      - GF_FEATURE_TOGGLES_ENABLE=alertingSimplifiedRouting,alertingQueryAndExpressionsStepMode
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana-data:/var/lib/grafana # persist dashboards, users and settings
      - ./observability/grafana/provisioning:/etc/grafana/provisioning # automatically provision (e.g. datasources)
    networks:
      - observability
volumes:
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
  loki-data:
    driver: local
