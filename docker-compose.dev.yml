services:
  ## -------------------------- ##
  # ml_host_backend related services
  ## -------------------------- ##
  ml_host_backend_base_image:
    build:
      context: ./services/ml_host_backend
      dockerfile: Dockerfile.base
    image: ml_host_backend:base
  ml_host_backend_local:
    image: ml_host_backend:base
    volumes:
      - ./services/ml_host_backend:/home/services/ml_host_backend
      - ./services/ml_train_hub/file_exchange:/home/services/file_exchange
    container_name: ml_host_backend_local
    depends_on:
      - ml_host_backend_base_image
      - ml_train_hub_dev
    env_file:
      - ./.envs/.ml_host_backend
    ports:
    - "8000:8000"
    command: ["uvicorn", "ml_host_backend.app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
  ml_host_backend_dev:
    build:
      context: ./services/ml_host_backend
      dockerfile: Dockerfile
      target: dev
    container_name: ml_host_backend_dev
    image: ml_host_backend:dev
    depends_on:
      - ml_train_hub_dev
    env_file:
      - ./.envs/.ml_host_backend
      - ./.envs/.env
    ports:
    - "8000:8000"
  ## --------------------------##
  # ml_train_hub related services
  ## --------------------------##
  ml_train_hub_dev:
    container_name: ml_train_hub_dev
    image: ml_train_hub:dev #  ðŸ‘ˆ This sets the name and tag
    build:
      context: ./services/ml_train_hub
      dockerfile: Dockerfile
      target: dev
    volumes:
      - ./services/ml_train_hub/mlruns:/home/services/ml_train_hub/mlruns
      - ./services/ml_train_hub/file_exchange:/home/services/ml_train_hub/file_exchange # adapt the local folder for the prod server, how files shall be exchanged
    ports:
    - "8001-8002:8001-8002" # MLflow server (dev=8001) and FastAPI server (dev=8002)

  elastic_setup:
    # https://www.elastic.co/docs/deploy-manage/deploy/self-managed/install-elasticsearch-docker-compose
    # https://github.com/elastic/elasticsearch/blob/main/docs/reference/setup/install/docker/docker-compose.yml
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_STACK_VERSION}
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    # this setup can be used as blueprint for multiple instances of elastic search
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_STACK_VERSION}
    depends_on:
      elastic_setup:
        condition: service_healthy
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
      - ./data/esdata01:/usr/share/elasticsearch/data
    env_file:
      - ./.envs/.elastic
    ports:
      - "9200:9200"
    environment:
      - node.name=es01
      - cluster.name=${ELASTIC_CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      # - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es02,es03
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${ELASTIC_LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:${ELASTIC_STACK_VERSION}
  #   ports:
  #     - "5601:5601"
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

  # filebeat:
  #   image: docker.elastic.co/beats/filebeat:${ELASTIC_STACK_VERSION}
  #   user: root
  #   volumes:
  #     - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   depends_on:
  #     - elasticsearch
  #     - kibana

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
